---
apiVersion: v1
kind: Template
labels:
  template: "${APP_NAME}-${JOB_NAME}-backend-bc-template"
metadata:
  name: "${APP_NAME}-${JOB_NAME}-backend-dc"
objects:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: "${APP_NAME}-${JOB_NAME}"
    name: "${APP_NAME}-${JOB_NAME}-backend"
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: "${APP_NAME}-${JOB_NAME}"
      deploymentconfig: "${APP_NAME}-${JOB_NAME}-backend"
    sessionAffinity: None
    type: ClusterIP
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: "${APP_NAME}-${JOB_NAME}"
    name: "${APP_NAME}-${JOB_NAME}-backend"
  spec:
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      app: "${APP_NAME}-${JOB_NAME}"
      deploymentconfig: "${APP_NAME}-${JOB_NAME}-backend"
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: "${APP_NAME}-${JOB_NAME}"
          deploymentconfig: "${APP_NAME}-${JOB_NAME}-backend"
      spec:
        containers:
        - image: "docker-registry.default.svc:5000/${NAMESPACE}/${APP_NAME}-${JOB_NAME}-backend:latest"
          imagePullPolicy: Always
          # livenessProbe:
          #  failureThreshold: 3
          #  httpGet:
          #    path: "/api/v1/health"
          #    port: 8080
          #    scheme: HTTP
          #  periodSeconds: 10
          #  successThreshold: 1
          #  timeoutSeconds: 10
          name: "${APP_NAME}-${JOB_NAME}-backend"
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: "/api/v1/health"
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            requests:
              cpu: "${CPU_REQUEST}"
              memory: "${MEMORY_REQUEST}"
            limits:
              cpu: "${CPU_LIMIT}"
              memory: "${MEMORY_LIMIT}"
          env:
          - name: PORT
            value: "8080"
          - name: CMSG_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: username
                name: cmsg-client
          - name: CMSG_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: password
                name: cmsg-client
          envFrom:
          - configMapRef:
              name: cmsg-config
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
parameters:
- name: REPO_NAME
  description: Application repository name
  required: true
- name: JOB_NAME
  description: Job identifier (i.e. 'pr-5' OR 'master')
  required: true
- name: NAMESPACE
  description: Target namespace reference (i.e. 'k8vopl-dev')
  required: true
- name: APP_NAME
  description: Application name
  required: true
- name: CPU_REQUEST
  description: Requested CPU per pod (in millicores ex. 500m)
  required: true
  value: 500m
- name: MEMORY_REQUEST
  description: Requested Memory per pod (in gigabytes Gi or megabytes Mi ex. 500Mi)
  required: true
  value: 1Gi
- name: CPU_LIMIT
  description: Limit Peak CPU per pod (in millicores ex. 1000m)
  required: true
  value: 1000m
- name: MEMORY_LIMIT
  description: Limit Peak Memory per pod (in gigabytes Gi or megabytes Mi ex. 2Gi)
  required: true
  value: 2Gi
